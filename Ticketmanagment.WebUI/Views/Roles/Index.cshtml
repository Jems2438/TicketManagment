@using Kendo.Mvc.UI

<div class="text-center">
    <h2>Roles Manager   </h2>
</div>

    <div>
        Start Date: @(Html.Kendo().DatePicker().Name("startDate").HtmlAttributes(new { style = "width:300px" }))
        End Date: @(Html.Kendo().DatePicker().Name("endDate").HtmlAttributes(new { style = "width:300px" }))
    </div>

    <div>
                @(Html.Kendo().Grid<TicketManagment.Core.ViewModels.RoleListViewModel>()
                 .Name("grid")

                 .ToolBar(tools =>
                 {
                 tools.Create().Text("CreateRole");
                 tools.Search().Text("search anything...");
                 
                 })
                .Columns(columns =>
                {
                    columns.Bound(c => c.CreatedBy).Width(100);
                    columns.Bound(c => c.CreatedAt).Format("{0: dd/MM/yyyy}").Width(100);
                    columns.Bound(c => c.Name).Width(120);
                    columns.Bound(c => c.Code).Width(100);
                    columns.Bound(c => c.UpdatedBy).Width(100);
                    columns.Bound(c => c.UpdatedAt).Format("{0: dd/MM/yyyy}").Width(100);
                    columns.Command(command =>
                    {
                        command.Edit();
                        command.Destroy();
                    }).Title("Commands").Width(180);
                })

                .Editable(editable => editable.Mode(GridEditMode.PopUp)
                        .TemplateName("RoleEdit")
                        .Window(w =>
                        {
                            w.Width(400);
                        }))
                 .Sortable()
                 .Search(s =>
                 {
                     s.Field(o => o.Name, "contains");
                     s.Field(o => o.Code, "contains");
                 })
                 .Events(events => { events.Edit("onEdit");
                     events.Save("onSave");
                     events.DataBound("onDataBound");
                 })
                 .HtmlAttributes(new { style =
                                    "background-color:#dbdbdb;"
                 })
                 .Reorderable(r => r.Columns(true))
                 .Groupable(g => g.ShowFooter(false))
                 .Scrollable()
                 .DataSource(dataSource => dataSource
                    .Ajax()

                    .Model(model =>
                    {
                        model.Id(p => p.Id);
                        model.Field(p => p.Id).Editable(false);
                        model.Field(p => p.Name).Editable(true);
                        model.Field(p => p.Code).Editable(true);
                        model.Field(p => p.CreatedAt).Editable(false);
                        model.Field(p => p.CreatedBy).Editable(false);
                        model.Field(p => p.UpdatedAt).Editable(false);
                        model.Field(p => p.UpdatedBy).Editable(false);

                    })
                    .Read(read => read.Action("GetListOfRole", "Roles"))
                    .Create(update =>  update.Action("CreateRole", "Roles"))
                    .Update(update => update.Action("Edit", "Roles"))
                    .Destroy(update => update.Action("ConfirmDelete", "Roles"))
                    .PageSize(20)
                )
                .Resizable(resize => resize.Columns(true))
        )

    </div>
    <div>
        @(Html.Kendo().Notification()
    .Name("notification")
    .Position(p => p.Pinned(true).Top(30).Right(30))
    .Stacking(NotificationStackingSettings.Down)
    .AutoHideAfter(0)
    .Templates(t =>
    {
       
        t.Add().Type("success").ClientTemplateID("successTemplate");
    })
)
    </div>
    <script id="successTemplate" type="text/x-kendo-template">
        <div class="upload-success">
            <img alt="Telerik UI for ASP.NET MVC Notification success icon" src="../content/web/notification/success-icon.png" />
            <h3>#= message #</h3>
        </div>
    </script>
        <script>

            function onEdit(e) {
                var window = e.container.data("kendoWindow");

                if (e.model.isNew()) {
                    window.setOptions({ title: "Create Role" });
                } else {
                    // This is an Edit operation
                    window.setOptions({ title: "Edit Details" });
                }
            }

            function onSave(e) {
                location.reload();
            }

            //function onDataBound(e) {
            //    var grid = this;
            //    var startDatePicker = $("#startDate").data("kendoDatePicker");
            //    var endDatePicker = $("#endDate").data("kendoDatePicker");

            //    $("#filter-btn").click(function () {
            //        var startDate = startDatePicker.value();
            //        var endDate = endDatePicker.value();

            //        if (startDate && endDate) {
            //            grid.dataSource.filter([
            //                { field: "UpdatedAt", operator: "ge", value: startDate },
            //                { field: "UpdatedAt", operator: "le", value: endDate }
            //            ]);
            //        } else {
            //            grid.dataSource.filter({});
            //        }
            //    });
            //}


            function onDataBound(e) {
                var grid = this;
                var startDatePicker = $("#startDate").data("kendoDatePicker");
                var endDatePicker = $("#endDate").data("kendoDatePicker");

                startDatePicker.bind("change", function () {
                    applyFilter();
                });
                endDatePicker.bind("change", function () {
                    applyFilter();
                });

                function applyFilter() {
                    var startDate = startDatePicker.value();
                    var endDate = endDatePicker.value();

                    if (startDate && endDate) {
                        grid.dataSource.filter([
                            { field: "CreatedAt", operator: "ge", value: startDate },
                            { field: "CreatedAt", operator: "le", value: endDate }
                        ]);
                        
                    } else {
                        grid.dataSource.filter({});
                    }
                } 
            }

        </script>

        <style>
           
            .k-grid .k-grid-search {
                display: flex;
                margin-left: auto;
                margin-right: 0;
                width: 200px;
            }

            .k-button {
                background-color: #3958AC;
            }

                .k-button:hover {
                    color: white;
                    border-color: blue;
                    background-color: blue;
                }

            .k-grid-add {
                background-color: #6699ff;
                color: white;
            }

                .k-grid-add:hover {
                    background-color: #6699ff;
                }

            .k-grid-pager {
                border: 5px solid #d5d5d5;
            }

            .k-grid .k-grid-header .k-header {
                border-bottom: none;
                background-color: #3958AC;
                color: white;
            }

                .k-grid .k-grid-header .k-header a {
                    color: white;
                }

            .k-pager {
                background-color: gray;
                color: gray;
            }

                .k-pager .k-link.k-selected {
                    background-color: lime;
                }

            .k-bg-inherit .k-bg-transparent {
                background-color: darkgray;
            }

            .k-button-solid-primary {
                border-color: gray !important;
                color: white;
                background-color: darkslateblue;
            }

                .k-button-solid-primary:hover, .k-button-solid-primary.k-hover {
                    border-color: blue;
                    background-color: blue;
                }

            .k-grid-remove-command {
                border-color: gray !important;
                color: white;
                background-color: darkslateblue;
            }

                .k-grid-remove-command:hover, .k-grid-remove-command.k-hover {
                    border-color: blue;
                    color: white;
                    background-color: crimson;
                }
        </style>
        <style>
            .demo-section p {
                margin: 3px 0 0 20px;
                line-height: 50px;
            }

            .demo-section .k-button {
                width: 250px;
            }


            /* Notifications */
            .k-notification h3 {
                padding: 30px 10px 5px;
                font-size: 1em;
                line-height: normal;
            }

            .k-notification img {
                margin: 20px;
                float: left;
            }


            /* Info template */
            .new-mail {
                width: 300px;
                height: 100px;
            }

            /* Error template */
            .wrong-pass {
                width: 300px;
                height: 100px;
            }

            /* Success template */
            .upload-success {
                width: 300px;
                height: 100px;
            }


            /* For Bootstrap v4 theme */
            .k-bootstrap-v4 .k-notification h3 {
                padding: 10px 10px 5px;
            }

            .k-bootstrap-v4 .k-notification img {
                margin: 10px 20px 0 0;
            }

            .k-bootstrap-v4 .new-mail,
            .k-bootstrap-v4 .wrong-pass,
            .k-bootstrap-v4 .upload-success {
                width: calc( 300px - 2.5rem );
                height: calc( 100px - 1.5rem );
            }


            /* For Material v2 theme */
            .k-material-v2 .k-notification h3 {
                padding: 10px 10px 5px;
            }

            .k-material-v2 .k-notification img {
                margin: 10px 20px 0 0;
            }

            .k-material-v2 .new-mail,
            .k-material-v2 .wrong-pass,
            .k-material-v2 .upload-success {
                width: 270px;
                height: 70px;
            }
        </style>
        @*<h2>Index</h2>

        <p>
            @Html.ActionLink("Create New", "Create")
        </p>
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedAt)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedBy)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Code)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UpdatedBy)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UpdatedAt)
                </th>
                <th></th>
            </tr>

        @foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedAt)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedBy)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Code)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UpdatedBy)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UpdatedAt)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
        }

        </table>*@

        @*<h2>Index</h2>

        <p>
            @Html.ActionLink("Create New", "Create")
        </p>
        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedAt)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreatedBy)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Code)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UpdatedBy)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UpdatedAt)
                </th>
                <th></th>
            </tr>

        @foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedAt)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CreatedBy)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Code)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UpdatedBy)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.UpdatedAt)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
        }

        </table>*@
